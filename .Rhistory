library(tidyverse)
library(ggplot2)
library(gridExtra)
df <- read.table("data/CADM2_PA_df.txt")
pheno_codes <- c("f.31.0.0","f.21022.0.0","f.50.0.0","f.48.0.0","f.49.0.0",
"f.21001.0.0","f.23098.0.0","f.23099.0.0","f.23101.0.0",
"f.23283.2.0","f.23280.2.0","f.23279.2.0","f.23278.2.0")
pheno_names <- c("sex","age","height", "waist","hip","BMI", "TM_BIA","BFPct_BIA",
"FFM_BIA","TM_Dxa","TLM_Dxa","FFM_Dxa","TFM_Dxa")
geno_codes = c("rs62253088_T","rs1248860_G")
geno_names = c("CADM2_SNP1","CADM2_SNP2")
codes <- c(pheno_codes, geno_codes)
vnames <- c(pheno_names, geno_names)
code_map <- data.frame(code = codes, name = vnames)
vnames
baseline <- c("f.54.0.0", "chip", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6",
"PC7", "PC8", "PC9", "PC10", "f.189.0.0")
names(df)[which(!(names(df) %in% baseline))][-1] <- vnames
names(df)
df$WtHR <- df$waist / df$hip
df$FFMPct_BIA <- df$FFM_BIA / df$TM_BIA
df$height <- df$height * 100 #convert from cm to meters
df$waist <- df$waist * 100 #convert from cm to meters
df$hip <- df$hip * 100 #convert from cm to meters
df$TLM_Dxa <- round(df$TLM_Dxa / 1000, digits = 1) #converted from g to kg
df$FFM_Dxa <- round(df$FFM_Dxa / 1000, digits = 1) #converted from g to kg
df$TFM_Dxa <- round(df$TFM_Dxa / 1000, digits = 1) #converted from g to kg
df$LMPct_Dxa <- round(100 * df$TLM_Dxa / df$TM_Dxa, digits = 1) # values between 0-100%
df$BFPct_Dxa <- round( 100 * df$TFM_Dxa / df$TM_Dxa, digits = 1) # values between 0-100%
df$FFMPct_Dxa <- round( 100 * df$FFM_Dxa / df$TM_Dxa, digits = 1) # values between 0-100%
men_data <- df[which(df$sex == 1), ]
women_data <- df[which(df$sex == 0), ]
MakeHisto <- function(Var, DataSet){
# Var = variable name in STRING format
# DataSet = df object name
VarCol <- match(Var, colnames(DataSet))
png(file = paste(deparse(substitute(DataSet)), 'Histof', Var, '.png', sep = ''))
hist(DataSet[,VarCol], breaks = 50, xlab = Var, main = paste(
deparse(substitute(DataSet)), ': Histof', Var, sep =''))
dev.off()
}
beta <- function(reg, CoVar){
# this function determines the beta coefficient for a covariate of a regression
#
# argumments:
# reg = the obj name of a stored regression
# CoVar = the name of the desired covariate, in STRING format
#
# returns the Beta Coefficient associated with the CoVar
RowNum <- match(CoVar, names(coefficients(reg)))
BetaCoef <- summary(reg)$coef[RowNum,1]
return (BetaCoef)
}
lower95 <- function(reg, CoVar) {
RowNum <- match(CoVar, names(coefficients(reg)))
ci95lo <- (summary(reg)$coef[RowNum,1]) - (summary(reg)$coef[RowNum,2] * 1.96)
return (ci95lo)
}
upper95 <- function(reg, CoVar) {
RowNum <- match(CoVar, names(coefficients(reg)))
ci95hi <- (summary(reg)$coef[RowNum,1]) + (summary(reg)$coef[RowNum,2] * 1.96)
return (ci95hi)
}
se <- function(reg, CoVar){
# this function determines the standard error of a covariate for a regression
#
# argumments:
# reg = the obj name of a stored regression
# CoVar = the name of the desired covariate, in STRING format
#
# returns the Standard Error associated with the CoVar
RowNum <- match(CoVar, names(coefficients(reg)))
se <- summary(reg)$coef[RowNum,2]
return (se)
}
t <- function(reg, CoVar){
# this function determines the t score of a covariate from a regression
#
# argumments:
# reg = the obj name of a stored regression
# CoVar = the name of the desired covariate, in STRING format
#
# returns the t score associated with the CoVar
RowNum <- match(CoVar, names(coefficients(reg)))
t <- summary(reg)$coef[RowNum,3]
return (t)
}
p <- function(reg, CoVar){
# this function determines the p-val of a covariate from a regression
#
# argumments:
# reg = the obj name of a stored regression
# CoVar = the name of the desired covariate, in STRING format
#
# returns the p-val associated with the CoVar
RowNum <- match(CoVar, names(coefficients(reg)))
p <- summary(reg)$coef[RowNum,4]
return (p)
}
create_CoVars <- function(SNP, OutVar, DataSet, OtherCovariates){
#DataSet is a STRING
#OtherCovariates is a VECTOR of strings or single STRING; needs to be NA without "", if NA
if (grepl("Pct", OutVar) | OutVar == "BMI" | OutVar == "WtHR"){
CoVariates <- c("age")
} else {
CoVariates <- c("age", "height")
}
if (grepl("men", DataSet) == FALSE){
CoVariates <- c(CoVariates, "sex")
}
for(CoVar in OtherCovariates){
if(!is.na(CoVar)){
CoVariates<- c(CoVariates, CoVar)
}
}
return(CoVariates)
}
LinReg <- function(OutVar, dataset, CoVariates, SNP){
# This function executes a regression based on four arguments
#
# arguments:
# OutVar = the name of the outcome phenotype, in STRING format
# dataset = the dataset of interest, in a data frame format (NOT string type)
# CoVariates = all the additional covariates of interest besides those outlined in the baseline, this is in VECTOR format
# SNP = the name of the SNP of interest, in STRING format
#
# returns the regression; This should be used as such: reg <- LinReg("BMI", df, c("sex", "age"), "CADM2_SNP1")
baseline <- c("as.factor(dataset$f.54.0.0)", "as.factor(dataset$chip)", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "f.189.0.0")
xvar <- c(baseline, CoVariates, SNP)
reg <- lm(reformulate(xvar, OutVar), data = dataset)
return( reg )
}
decide_dataset <- function(DataSet){
#DataSet is a string
if (grepl("men", DataSet) == FALSE){
dataset <- df
} else{
if(DataSet == 'women_data'){
dataset <- women_data
} else{
dataset <- men_data
}
}
return(dataset)
}
determine_geno <- function(SNP){
if(SNP == "rs62253088_T" | SNP == "rs1248860_G" |SNP == "rs2035562_A"){
return("CADM2")
} else if(  SNP == "rs166840_A"){
return("AKAP10")
} else if(SNP == "rs2988004_G"){
return("PAX5")
} else if (SNP == "rs159544_G"){
return("CTC")
} else{
return("invalid gene")
}
}
determine_SNP <- function(geno){
#geno in STRING format
if (geno == "CADM2_1"){
return("rs62253088_T")
} else if( geno == "CADM2_2"){
return("rs1248860_G")
} else if( geno == "CADM2_3"){
return("rs2035562_A")
} else if( geno == "AKAP10"){
return("rs2988004_G")
} else if( geno == "PAX5"){
return("rs159544_G")
} else if(geno == "CTC"){
return("rs159544_G")
} else{
return("invalid gene")
}
}
create_table <- function(LstOFoutputs, SNP, OtherCovariates){
# This funtion creates a table based on two arguments
#
# arguments:
# LstOFoutputs = a VECTOR where each object within it is a different
#combination of outcome phenotype and the dataset to analyze them in,
#both in the same string and separated by a space, like so:each "Phenotype dataset"
# SNP = the name of the SNP of interest in STRING format
#DataSet in STRING
#OtherCovariates is a VECTOR of strings or single STRING or NA
table<-as.data.frame(matrix(nrow=length(LstOFoutputs), ncol=7, NA))
names(table)<-c('DataSet', 'Pheno', 'Pop', 'beta', 'se', 't', 'p') #'Population',
nrow <- 1
for(OutVar in LstOFoutputs){
DataSet <- strsplit(OutVar, ' ')[[1]][2] #string
OutVar <- strsplit(OutVar, ' ')[[1]][1] #string
if (grepl("Pct", OutVar) | OutVar == "BMI" | OutVar == "WtHR"){
OtherCovariates <- NA
} else{
OtherCovariates <- c(OtherCovariates, "height")
}
CoVariates <- create_CoVars(SNP, OutVar, DataSet, OtherCovariates)
dataset <- decide_dataset(DataSet)
reg <- LinReg(OutVar, dataset, CoVariates, SNP)
table[nrow, 1] <- DataSet
table[nrow, 2] <- OutVar
table[nrow, 3] <- length(dataset[,match(OutVar, colnames(dataset))][which(!is.na(dataset[,match(OutVar, colnames(dataset))]))])
table[nrow, 4] <- beta(reg, SNP) #you could also find other covariates
table[nrow, 5] <- se(reg, SNP)
table[nrow, 6] <- t(reg, SNP)
table[nrow, 7] <- p(reg, SNP)
nrow <- nrow + 1
}
return(table)
}
create_table2 <- function(LstOFoutputs, SNP, OtherCovariates){
# This funtion creates a table based on two arguments
# This does not include height
#
# arguments:
# LstOFoutputs = a VECTOR where each object within it is a different
#combination of outcome phenotype and the dataset to analyze them in,
#both in the same string and separated by a space, like so:each "Phenotype dataset"
# SNP = the name of the SNP of interest in STRING format
#DataSet in STRING
#OtherCovariates is a VECTOR of strings or single STRING or NA
table<-as.data.frame(matrix(nrow=length(LstOFoutputs), ncol=7, NA))
names(table)<-c('DataSet', 'Pheno', 'Pop', 'beta', 'se', 't', 'p') #'Population',
nrow <- 1
for(OutVar in LstOFoutputs){
DataSet <- strsplit(OutVar, ' ')[[1]][2] #string
OutVar <- strsplit(OutVar, ' ')[[1]][1] #string
CoVariates <- create_CoVars(SNP, OutVar, DataSet, OtherCovariates)
dataset <- decide_dataset(DataSet)
reg <- LinReg(OutVar, dataset, CoVariates, SNP)
table[nrow, 1] <- DataSet
table[nrow, 2] <-OutVar
table[nrow, 3] <- length(dataset[,match(OutVar, colnames(dataset))][which(!is.na(dataset[,match(OutVar, colnames(dataset))]))])
table[nrow, 4] <- beta(reg, SNP) #you could also find other covariates
table[nrow, 5] <- se(reg, SNP)
table[nrow, 6] <- t(reg, SNP)
table[nrow, 7] <- p(reg, SNP)
nrow <- nrow + 1
}
return(table)
}
BetLU <- function(OutVar, DataSet, SNP, OtherCovariates){
CoVariates <- create_CoVars(SNP, OutVar, DataSet, OtherCovariates)
dataset <- decide_dataset(DataSet)
reg <- LinReg(OutVar, dataset, CoVariates, SNP)
return(c(beta(reg,SNP), lower95(reg,SNP), upper95(reg,SNP)))
}
ForestTable <- function(SNP, outcomes, DataSet, OtherCovariates){
table <- data.frame(matrix(nrow = length(outcomes), ncol = 4, NA))
names(table) <- c('Outcome', 'Beta', 'ci95lo', 'ci95hi')
nrow <- 1
for(outcome in outcomes){
BLU <- BetLU(outcome, DataSet, SNP, OtherCovariates)
if(outcome == 'BMI'){
if( BLU[1] < 0){
BLU <- BLU * -1
}
} else if(table[1,2] < 0){
BLU <- BLU * -1
}
table[nrow, 1] <- outcome
table[nrow, 2] <- BLU[1] #beta
table[nrow, 3] <- BLU[2] #lower
table[nrow, 4] <- BLU[3] #upper
nrow <- nrow + 1
}
return(table)
}
ForestPlot <- function(ForestTable, PNGname, Geno){
png(file = paste(PNGname, ".png", sep = ''))
ForestTable$Outcome <- factor(x = ForestTable$Outcome, levels = ForestTable$Outcome)
ggplot(data=ForestTable, aes(x=Outcome, y=Beta, color = ForestTable$Outcome)) +
geom_point(size = 5, shape = 8) +
theme_bw()+
geom_errorbar(aes(ymin=ci95lo, ymax=ci95hi), width= 0.3, size = 2, show.legend=FALSE)+
#geom_text()
coord_cartesian(ylim=c(-0.5, 0.5)) +
scale_y_continuous() +
#geom_hline(yintercept= ForestTable[1, 2], lty = 'dashed', size = 1, color = 'red') +
geom_hline(yintercept= 0, lty = 'dashed', size = 1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
coord_flip() + #this is why we create a geom_h instead of vertical line
xlab(label = NULL) +
ylab(label = paste(Geno, "Beta Coefficient Value")) +
theme(axis.text.y = element_text(face = 'bold', family = "Times New Roman", size = 20),
axis.text.x = element_text(face = 'bold', family = "Times New Roman", size = 15),
axis.title.x = element_text(face = 'bold', family = "Times New Roman", size = 20),
legend.position =  "none",
axis.line = element_line(color = 'black', linetype = "solid", size = 1))
fname <-  paste(PNGname, ".png", sep = '')
ggsave(fname)
}
# ************** Need to Assess
PrintCoVariates <- function(LstOFoutputs, SNP){
# This funtion was created to check the accuracy of the create_table() function
#
# arguments:
# LstOFoutputs = a VECTOR where each object within it is a different
#combination of outcome phenotype and the dataset to analyze them in,
#both in the same string and separated by a space, like so:each "Phenotype dataset"
# SNP = the name of the SNP of interest in STRING format
#
# prints out the OutVar + DataSet + list of CoVariates for each val in LstOFoutputs
table<-as.data.frame(matrix(nrow=length(LstOFoutputs), ncol=8, NA))
names(table)<-c('DataSet', 'Pheno', 'Pop', 'SNP', 'beta', 'se', 't', 'p') #'Population',
nrow <- 1
for(OutVar in LstOFoutputs){
DataSet <- strsplit(OutVar, ' ')[[1]][2] #string
OutVar <- strsplit(OutVar, ' ')[[1]][1] #string
if (grepl("Pct", OutVar) | OutVar == "BMI" | OutVar == "WtHR"){
CoVariates <- c("age") #does not require height as covariate
} else {
CoVariates <- c("age", "height")
}
if (grepl("men", DataSet) == FALSE){
#if "men" is not in the DataSet name, aka not women or men subdatasets
CoVariates <- c(CoVariates, "sex")
dataset <- df
} else {
if(grepl("women", DataSet)) {
dataset <- women_data
} else {
dataset <- men_data
}
}
print(c(OutVar, DataSet, CoVariates))
}
}
create_CoVars("CADM2_SNP1","BMI",df)
create_CoVars("CADM2_SNP1","BMI",df,NA)
xvar <- c("as.factor(dataset$f.54.0.0)", "as.factor(dataset$chip)", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "f.189.0.0", "gender", "CADM2_SNP1")
OutVars <- c("BMI", "WtHR")
for (OutVar in OutVars){
return(lm(reformulate(xvar, OutVar), data = df))
}
for (OutVar in OutVars){
return(lm(reformulate(xvar, OutVar), data = df))
}
xvar <- c("as.factor(df$f.54.0.0)", "as.factor(df$chip)", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "f.189.0.0", "gender", "CADM2_SNP1")
OutVars <- c("BMI", "WtHR")
for (OutVar in OutVars){
return(lm(reformulate(xvar, OutVar), data = df))
}
xvar <- c("as.factor(df$f.54.0.0)", "as.factor(df$chip)", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "f.189.0.0", "sex", "CADM2_SNP1")
OutVars <- c("BMI", "WtHR")
for (OutVar in OutVars){
return(lm(reformulate(xvar, OutVar), data = df))
}
print(lm(reformulate(xvar, OutVar), data = df))
for (OutVar in OutVars){
print(lm(reformulate(xvar, OutVar), data = df))
}
slr.lm <- lm(BMI~as.factor(df$f.54.0.0), as.factor(df$chip), PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, f.189.0.0, sex, CADM2_SNP1, data =df)
para.lm <- lm(BMI~as.factor(df$f.54.0.0), as.factor(df$chip), PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, f.189.0.0, CADM2_SNP1, data =df)
slr.lm <- lm(BMI~"as.factor(df$f.54.0.0)", "as.factor(df$chip)", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "f.189.0.0", "sex", "CADM2_SNP1", data =df)
df$PC5
slr.lm <- lm(BMI~as.factor(df$f.54.0.0), as.factor(df$chip), PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, f.189.0.0, sex, CADM2_SNP1, data =df)
slr.lm <- lm(BMI~as.factor(df$f.54.0.0), as.factor(df$chip), PC1, PC2, PC3, PC4, PC6, PC7, PC8, PC9, PC10, f.189.0.0, sex, CADM2_SNP1, data =df)
df$PC6
slr.lm <- lm(BMI~as.factor(df$f.54.0.0), as.factor(df$chip), PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, f.189.0.0, sex, CADM2_SNP1, data =df)
df$PC5
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
df <- read.table("data/CADM2_PA_df.txt")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
df <- read.table("data/CADM2_PA_df.txt")
pheno_codes <- c("f.31.0.0","f.21022.0.0","f.50.0.0","f.48.0.0","f.49.0.0",
"f.21001.0.0","f.23098.0.0","f.23099.0.0","f.23101.0.0",
"f.23283.2.0","f.23280.2.0","f.23279.2.0","f.23278.2.0")
pheno_names <- c("sex","age","height", "waist","hip","BMI", "TM_BIA","BFPct_BIA",
"FFM_BIA","TM_Dxa","TLM_Dxa","FFM_Dxa","TFM_Dxa")
geno_codes = c("rs62253088_T","rs1248860_G")
geno_names = c("CADM2_SNP1","CADM2_SNP2")
codes <- c(pheno_codes, geno_codes)
vnames <- c(pheno_names, geno_names)
code_map <- data.frame(code = codes, name = vnames)
vnames
baseline <- c("f.54.0.0", "chip", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6",
"PC7", "PC8", "PC9", "PC10", "f.189.0.0")
names(df)[which(!(names(df) %in% baseline))][-1] <- vnames
names(df)
df$WtHR <- df$waist / df$hip
df$FFMPct_BIA <- df$FFM_BIA / df$TM_BIA
df$height <- df$height * 100 #convert from cm to meters
df$waist <- df$waist * 100 #convert from cm to meters
df$hip <- df$hip * 100 #convert from cm to meters
df$TLM_Dxa <- round(df$TLM_Dxa / 1000, digits = 1) #converted from g to kg
df$FFM_Dxa <- round(df$FFM_Dxa / 1000, digits = 1) #converted from g to kg
df$TFM_Dxa <- round(df$TFM_Dxa / 1000, digits = 1) #converted from g to kg
df$LMPct_Dxa <- round(100 * df$TLM_Dxa / df$TM_Dxa, digits = 1) # values between 0-100%
df$BFPct_Dxa <- round( 100 * df$TFM_Dxa / df$TM_Dxa, digits = 1) # values between 0-100%
df$FFMPct_Dxa <- round( 100 * df$FFM_Dxa / df$TM_Dxa, digits = 1) # values between 0-100%
men_data <- df[which(df$sex == 1), ]
women_data <- df[which(df$sex == 0), ]
summary(df)
lm(BMI~as.factor(dataset$f.54.0.0), as.factor(dataset$chip), PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, f.189.0.0, sex, CADM2_SNP1,data=df)
lm(BMI~as.factor(dataset$f.54.0.0)+ as.factor(dataset$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
slr.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
slr.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
para.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
para.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(slr.lm,para.lm)
slr.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
para.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(slr.lm,para.lm)
anova(slr.lm)
avnoa(para.lm)
anova(para.lm)
slr.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
para.lm <- lm(BMI~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(slr.lm,para.lm)
anova(slr.lm)
anova(para.lm)
slr.lm <- lm(WtHR~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
para.lm <- lm(WtHR~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(WtHR_slr.lm,WtHR_para.lm)
WtHR_slr.lm <- lm(WtHR~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
WtHR_para.lm <- lm(WtHR~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(WtHR_slr.lm,WtHR_para.lm)
anova(WtHR_slr.lm)
anova(WtHR_para.lm)
FFMPct_Dxa_slr.lm <- lm(FFMPct_Dxa~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
FFMPct_Dxa_para.lm <- lm(FFMPct_Dxa~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(FFMPct_Dxa_slr.lm,FFMPct_Dxa_para.lm)
anova(FFMPct_Dxa_slr.lm)
anova(FFMPct_Dxa_para.lm)
LMPct_Dxa_slr.lm <- lm(LMPct_Dxa~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
LMPct_Dxa_para.lm <- lm(LMPct_Dxa~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(LMPct_Dxa_slr.lm,LMPct_Dxa_para.lm)
anova(LMPct_Dxa_slr.lm)
anova(LMPct_Dxa_para.lm)
WtHR_slr.lm <- lm(WtHR~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ sex+ CADM2_SNP1,data=df)
WtHR_para.lm <- lm(WtHR~as.factor(df$f.54.0.0)+ as.factor(df$chip)+ PC1+ PC2+ PC3+ PC4+ PC5+ PC6+ PC7+ PC8+ PC9+ PC10+ f.189.0.0+ CADM2_SNP1,data=df)
anova(WtHR_slr.lm,WtHR_para.lm)
anova(WtHR_slr.lm)
anova(WtHR_para.lm)
